<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>betweencurlybraces</title>
    <link>https://sskelkar.github.io/</link>
    <description>Recent content on betweencurlybraces</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Feb 2010 09:52:13 +0100</lastBuildDate>
    
	<atom:link href="https://sskelkar.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Database integration tests for a Spring application</title>
      <link>https://sskelkar.github.io/db-integration-tests-for-spring-app/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/db-integration-tests-for-spring-app/</guid>
      <description>Suppose you are tasked with writing tests for a Spring and Hibernate application. This application uses a mix of native queries, HQL or entity associations to fetch data from the database. If you choose to mock the DAO or entity layers, you leave a significant portion of the code untested. In such cases data integration tests can provide the most correct feedback. But you do you configure your application to run integration tests?</description>
    </item>
    
    <item>
      <title>The small pleasures of programming</title>
      <link>https://sskelkar.github.io/small-pleasures-of-programming/</link>
      <pubDate>Sun, 23 Sep 2018 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/small-pleasures-of-programming/</guid>
      <description>It’s not just pulling off a complex engineering feat that makes programmers love their jobs. There are small pleasures to be had even in your day to day tasks, if you look for them.
Seasoned programmers know the thrill of recognising the possibility to introduce an abstraction over duplication. A task as simple as renaming a variable can be the difference between obscurantism and lucidity. It’s the boy scout principle in action.</description>
    </item>
    
    <item>
      <title>Representing natural numbers in lambda calculus</title>
      <link>https://sskelkar.github.io/representing-natural-numbers-in-lambda-calculus/</link>
      <pubDate>Wed, 08 Nov 2017 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/representing-natural-numbers-in-lambda-calculus/</guid>
      <description>One of the joys of reading SICP is that apart from the main subject matter, we come across many tangential topics that are interesting in their own right. One such topic is mentioned in Exercise 2.6: Church numerals. Named after the mathematician Alonzo Church, Church numerals are a way of representing natural numbers in lambda calculus. But what is λ-calculus?
From a programming perspective, λ-calculus can be thought of as the smallest universal programming language.</description>
    </item>
    
    <item>
      <title>Using thread dumps to analyse deadlocks</title>
      <link>https://sskelkar.github.io/using-thread-dumps-to-analyze-deadlocks/</link>
      <pubDate>Sat, 14 Oct 2017 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/using-thread-dumps-to-analyze-deadlocks/</guid>
      <description>In a multi-threaded Java application, a deadlock occurs when two threads wait forever attempting to acquire locks that are held by each other. Here’s a simple example to simulate a deadlock: public class Deadlock { private Object lock1; private Object lock2; public Deadlock(Object lock1, Object lock2) { this.lock1 = lock1; this.lock2 = lock2; } public void methodA() { System.out.println(&amp;#34;trying to acquire lock1 from - &amp;#34; + Thread.currentThread().getName()); synchronized (lock1) { someLongRunningTask(); methodB(); } } public void methodB() { System.</description>
    </item>
    
    <item>
      <title>Setting up a JavaScript project in 2017</title>
      <link>https://sskelkar.github.io/setting-up-a-javascript-project-in-2017/</link>
      <pubDate>Sat, 14 Jan 2017 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/setting-up-a-javascript-project-in-2017/</guid>
      <description>Creating a front-end JavaScript project can be a daunting task due to the sheer volume of choices available while deciding the tech stack. First, you need to decide the JavaScript framework or library for your project. Do you plan to use the latest ES2015 language features in your code? If yes, then you need a transpiler because your browser probably doesn’t support them yet. Then you require a bundling tool to get your code loaded in the browser.</description>
    </item>
    
    <item>
      <title>Hystrix – a simple use case</title>
      <link>https://sskelkar.github.io/hystrix-a-simple-use-case/</link>
      <pubDate>Mon, 05 Dec 2016 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/hystrix-a-simple-use-case/</guid>
      <description>Hystrix is a fault tolerance library that is very useful for managing failures in a distributed environment like microservices. Suppose we have a service A dependent on service B, which is in turn dependent on service C.
A -&amp;gt; B -&amp;gt; C Let&amp;rsquo;s say a call is made from A to B. To serve this request, B needs to call C but there’s a communication failure between them. If the call from B to C is wrapped in Hystrix mechanism, we prevent the failure being propagated to A.</description>
    </item>
    
    <item>
      <title>Running time intensive operations in parallel with RxJava Observables</title>
      <link>https://sskelkar.github.io/rxjava-observables/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/rxjava-observables/</guid>
      <description>Recently I delved into the RxJava library. In this post I will demonstrate how RxJava Observables can be used to execute two long running tasks in parallel, so as to reduce their overall execution time.
While we can create threads for this purpose, an additional benefit of using Observables is that it provides a convenient way of collecting the results of the parallel tasks. With threads, this can get pretty complicated.</description>
    </item>
    
    <item>
      <title>In case of any query, revert back to me</title>
      <link>https://sskelkar.github.io/revert-back-to-me/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/revert-back-to-me/</guid>
      <description>If you have ever worked in an office in India, you would have encountered the phrase &amp;ldquo;revert back&amp;rdquo; at the end of official emails. When people ask you to “revert back”, they are actually asking you to &amp;ldquo;reply back&amp;rdquo;. It is an Indian colloquialism and in fact people think that using this phrase makes them sound more formal!
Of course languages are used differently in different parts of the world. But I have always wondered in which scenario would asking someone to &amp;ldquo;revert back&amp;rdquo; be a doable request?</description>
    </item>
    
    <item>
      <title>Logging with Spring AOP</title>
      <link>https://sskelkar.github.io/logging-with-spring-aop/</link>
      <pubDate>Fri, 12 Feb 2016 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/logging-with-spring-aop/</guid>
      <description>Aspect oriented programming (AOP) is a way of separating the business login in your code from cross cutting concerns. What is a cross cutting concern?
Analogy time. A typical house has different rooms that have designated functions. We keep our stuff in the rooms where they make sense. The living room is an unlikely location for a dishwasher and a bathtub belongs in the bathroom. But the electric circuit runs throughout the house because it is not tied to the functionality of any specific room.</description>
    </item>
    
    <item>
      <title>Memory profiling – simple examples</title>
      <link>https://sskelkar.github.io/memory-profiling-simple-examples/</link>
      <pubDate>Thu, 04 Feb 2016 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/memory-profiling-simple-examples/</guid>
      <description>Recently I have been trying to learn different memory profiling tools to monitor Java applications. I have looked into the command line tools that are shipped as part of JDK like jstat, jps, jvisualvm etc. Licensed tools like Yourkit provide wholesome information about a running JVM including memory usage, CPU time, thread count etc. Running a java application with -verbose:gc option prints memory usage of each generation after every garbage collection event.</description>
    </item>
    
    <item>
      <title>JPA Entity Relationships</title>
      <link>https://sskelkar.github.io/jpa-entity-relationships/</link>
      <pubDate>Fri, 15 Jan 2016 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/jpa-entity-relationships/</guid>
      <description>In a relational database, the relationships between two tables are defined by foreign keys. Typically, one table has a column that contains the primary key of another table’s row. In JPA, we deal with entity objects that are Java representations of database tables. So we need a different way for establishing relationship between two entities. JPA entity relationships define how these entities refer to each other.
For the purpose of this article, I will work with JPA 2.</description>
    </item>
    
    <item>
      <title>Introduction to jdb</title>
      <link>https://sskelkar.github.io/introduction-to-jdb/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/introduction-to-jdb/</guid>
      <description>jdb (Java Debugger) is a simple command-line debugger for Java classes that is provided as part of the JDK tools and utilities.
jdb is based on a server-client model. While debugging, you have one JVM where the code is executed and another JVM where debugger runs. Either VMs can act as the server. There are two ways to start the debugger. You can directly fire up the debugger by giving the main class name with the jdb command.</description>
    </item>
    
    <item>
      <title>It’s a grammatically error-prone life</title>
      <link>https://sskelkar.github.io/apostrophe-abuse/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/apostrophe-abuse/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Step by step guide to set up a service discovery environment</title>
      <link>https://sskelkar.github.io/service-discovery-setup-guide/</link>
      <pubDate>Thu, 17 Dec 2015 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/service-discovery-setup-guide/</guid>
      <description>In a microservices environment we can run multiple instances of a service for resilience and scalability. In a cloud environment these instances can go up and down arbitrarily. So we need some kind of service discovery mechanism to keep track of running instances. When a service A needs to call a service B, it asks for the address of any running instance of service B from the service discovery. The service discovery can also load balance the incoming requests.</description>
    </item>
    
    <item>
      <title>How to set up a local spring cloud config server</title>
      <link>https://sskelkar.github.io/how-to-set-up-a-local-spring-cloud-config-server/</link>
      <pubDate>Tue, 15 Dec 2015 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/how-to-set-up-a-local-spring-cloud-config-server/</guid>
      <description>From the official documentation,
 Spring Cloud Config provides server and client-side support for externalized configuration in a distributed system. With the Config Server you have a central place to manage external properties for applications across all environments.
 Steps to configure config server a. Create a new Gradle project for the config server. In https://start.spring.io/, select the starters for config server.
b. In your project, navigate to src/main/resources. Rename the automatically generated application.</description>
    </item>
    
    <item>
      <title>Building with Gradle</title>
      <link>https://sskelkar.github.io/building-with-gradle/</link>
      <pubDate>Sat, 24 Oct 2015 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/building-with-gradle/</guid>
      <description>Gradle is a popular build tool to manage Java projects. Gradle’s build scripts are written in Groovy. The design of Gradle is aimed to be used as a language, not as a rigid framework. In this article, I want to give some basic idea about what a Gradle build script is composed of and some of the features provided by Gradle.
Gradle is based upon two basic concepts: projects and tasks.</description>
    </item>
    
    <item>
      <title>Tail Recursion</title>
      <link>https://sskelkar.github.io/tail-recursion/</link>
      <pubDate>Wed, 26 Aug 2015 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/tail-recursion/</guid>
      <description>Tail recursion is one of those functional programming concepts that are likely to be unknown to someone coming from a Java background, like me. I encountered this term while skimming through the first few pages of SICP. After some quick R&amp;amp;D (i.e. googling), the following is a summary of what I have learnt.
Before understanding tail recursion, we need to be familiar with the term tail call. Simply put, if in a function definition, the last instruction before returning is a function call, then that function call is called a tail call.</description>
    </item>
    
    <item>
      <title>How unit testing leads to improved code</title>
      <link>https://sskelkar.github.io/how-unit-testing-leads-to-improved-code/</link>
      <pubDate>Sun, 09 Aug 2015 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/how-unit-testing-leads-to-improved-code/</guid>
      <description>In Test Driven Development, the purpose of unit testing is to help us design our classes and not just to validate the correctness of our code. In this article I want to demonstrate how unit testing forces us to write better code, with help of an example. I will use Mockito for mocking.
First, let me define the problem domain I’ll be using in the example. Suppose we have an online booking portal where customers make reservations for travel or accommodation.</description>
    </item>
    
    <item>
      <title>Scheming with the Little Schemer</title>
      <link>https://sskelkar.github.io/scheming-with-the-little-schemer/</link>
      <pubDate>Wed, 05 Aug 2015 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/scheming-with-the-little-schemer/</guid>
      <description>From a very long time, I have been an admirer of Lisp, an often praised but seldom used programming language. Common consensus about Lisp is that it is the kind of language you don’t need to know to get your daily tasks done, but any programmer worth his salt should be familiar with its concepts.
For a beginner, perhaps the easiest way to get a taste of Lisp is to go through The Little Schemer.</description>
    </item>
    
    <item>
      <title>RIP Yahoo! Pipes</title>
      <link>https://sskelkar.github.io/rip-yahoo-pipes/</link>
      <pubDate>Thu, 23 Jul 2015 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/rip-yahoo-pipes/</guid>
      <description>Yahoo has announced it will shut down its web mashup application Pipes on September of this year. Pipes was a pretty useful application to combine web feeds from multiple sources. With an easy to use GUI, you could add filters, modify the fields present in a feed and render the Pipe in RSS, JSON or Atom formats. So you could subscribe to a Pipe just like you would subscribe to any web feed.</description>
    </item>
    
    <item>
      <title>Closures in JavaScript</title>
      <link>https://sskelkar.github.io/closures-in-javascript/</link>
      <pubDate>Mon, 20 Jul 2015 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/closures-in-javascript/</guid>
      <description>A good understanding of closures is a must-have skill for any JavaScript programmer. So let&amp;rsquo;s take a look at how they work with two simple examples.
In JavaScript, functions are first class citizens. This means a function can be passed as an argument to another function, returned as the value from a function, assigned to a variable and stored in a data structure.
We can even write a function within a function, and the inner function has access to the environment within which it was created.</description>
    </item>
    
    <item>
      <title>Dependency Injection in AngularJS 1.x</title>
      <link>https://sskelkar.github.io/dependency-injection-in-angularjs-1x/</link>
      <pubDate>Sun, 19 Jul 2015 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/dependency-injection-in-angularjs-1x/</guid>
      <description>AngularJS Dependency Injection works like magic! You pass a service name in your controller constructor function and angular runtime promptly provides you with a suitable object. While this makes development process easier, it might be a little disconcerting if you don’t know what’s happening behind the scene. In this article, I will take a look at how angular DI works.
In an Angular application, user can create different kinds of components like: directives, controllers, services etc.</description>
    </item>
    
    <item>
      <title>The Mythical Man-Month</title>
      <link>https://sskelkar.github.io/the-mythical-man-month/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/the-mythical-man-month/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The circle of life</title>
      <link>https://sskelkar.github.io/sdlc/</link>
      <pubDate>Wed, 01 Oct 2014 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/sdlc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The mystery of the missing mutation</title>
      <link>https://sskelkar.github.io/sherlock-homes/</link>
      <pubDate>Sun, 12 May 2013 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/sherlock-homes/</guid>
      <description>A convoluted tale of fixing a bug in a legacy application as a junior developer with a seasoned BA.</description>
    </item>
    
    <item>
      <title>about me</title>
      <link>https://sskelkar.github.io/about/</link>
      <pubDate>Sun, 21 Feb 2010 09:52:13 +0100</pubDate>
      
      <guid>https://sskelkar.github.io/about/</guid>
      <description>My name is Sojjwal Kelkar. I am a software developer based in Pune, India.</description>
    </item>
    
  </channel>
</rss>