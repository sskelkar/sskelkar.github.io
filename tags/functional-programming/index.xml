<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on betweencurlybraces</title>
    <link>http://example.org/tags/functional-programming/</link>
    <description>Recent content in Functional Programming on betweencurlybraces</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Jul 2015 00:00:00 +0530</lastBuildDate>
    
	<atom:link href="http://example.org/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Closures in JavaScript</title>
      <link>http://example.org/2015-07-20-closures-in-javascript/</link>
      <pubDate>Mon, 20 Jul 2015 00:00:00 +0530</pubDate>
      
      <guid>http://example.org/2015-07-20-closures-in-javascript/</guid>
      <description>A good understanding of closures is a must-have skill for any JavaScript programmer. So let&amp;rsquo;s take a look at how they work with two simple examples.
In JavaScript, functions are first class citizens. This means a function can be passed as an argument to another function, returned as the value from a function, assigned to a variable and stored in a data structure.
We can even write a function within a function, and the inner function has access to the environment within which it was created.</description>
    </item>
    
  </channel>
</rss>