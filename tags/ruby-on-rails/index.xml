<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Rails on Sojjwal Kelkar</title>
    <link>https://sskelkar.github.io/tags/ruby-on-rails/</link>
    <description>Recent content in Ruby on Rails on Sojjwal Kelkar</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 13 Feb 2021 00:00:00 +0100</lastBuildDate>
    <atom:link href="https://sskelkar.github.io/tags/ruby-on-rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Squashing ruby on rails database migrations</title>
      <link>https://sskelkar.github.io/post/squashing-ruby-on-rails-database-migrations/</link>
      <pubDate>Sat, 13 Feb 2021 00:00:00 +0100</pubDate>
      <guid>https://sskelkar.github.io/post/squashing-ruby-on-rails-database-migrations/</guid>
      <description>&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;&#xA;&lt;p&gt;There are several reasons why you&amp;rsquo;d want to squash the database migrations in your Ruby on Rails application:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;In a long running project you may end up with hundreds of files in your &lt;code&gt;db/migrate&lt;/code&gt; folder over time. Carrying these legacy&#xA;migrations incurs maintenance overhead. For example, when upgrading the Rails version, you may need to modify those old migrations for&#xA;syntax changes.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;If your build process involves recreating the database to run the tests, it would need to run all of these old migrations. Running a lot&#xA;of migrations would slow down the build time.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
