<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on betweencurlybraces</title>
    <link>https://sskelkar.github.io/tags/javascript/</link>
    <description>Recent content in JavaScript on betweencurlybraces</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Jan 2017 00:00:00 +0530</lastBuildDate>
    
	<atom:link href="https://sskelkar.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setting up a JavaScript project in 2017</title>
      <link>https://sskelkar.github.io/setting-up-a-javascript-project-in-2017/</link>
      <pubDate>Sat, 14 Jan 2017 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/setting-up-a-javascript-project-in-2017/</guid>
      <description>Creating a front-end JavaScript project can be a daunting task due to the sheer volume of choices available while deciding the tech stack. First, you need to decide the JavaScript framework or library for your project. Do you plan to use the latest ES2015 language features in your code? If yes, then you need a transpiler because your browser probably doesn’t support them yet. Then you require a bundling tool to get your code loaded in the browser.</description>
    </item>
    
    <item>
      <title>Closures in JavaScript</title>
      <link>https://sskelkar.github.io/closures-in-javascript/</link>
      <pubDate>Mon, 20 Jul 2015 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/closures-in-javascript/</guid>
      <description>A good understanding of closures is a must-have skill for any JavaScript programmer. So let&amp;rsquo;s take a look at how they work with two simple examples.
In JavaScript, functions are first class citizens. This means a function can be passed as an argument to another function, returned as the value from a function, assigned to a variable and stored in a data structure.
We can even write a function within a function, and the inner function has access to the environment within which it was created.</description>
    </item>
    
    <item>
      <title>Dependency Injection in AngularJS 1.x</title>
      <link>https://sskelkar.github.io/dependency-injection-in-angularjs-1x/</link>
      <pubDate>Sun, 19 Jul 2015 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/dependency-injection-in-angularjs-1x/</guid>
      <description>AngularJS Dependency Injection works like magic! You pass a service name in your controller constructor function and angular runtime promptly provides you with a suitable object. While this makes development process easier, it might be a little disconcerting if you don’t know what’s happening behind the scene. In this article, I will take a look at how angular DI works.
In an Angular application, user can create different kinds of components like: directives, controllers, services etc.</description>
    </item>
    
  </channel>
</rss>