<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Sojjwal Kelkar</title>
    <link>https://sskelkar.github.io/tags/javascript/</link>
    <description>Recent content in JavaScript on Sojjwal Kelkar</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 14 Jan 2017 00:00:00 +0530</lastBuildDate>
    <atom:link href="https://sskelkar.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setting up a JavaScript project in 2017</title>
      <link>https://sskelkar.github.io/post/setting-up-a-javascript-project-in-2017/</link>
      <pubDate>Sat, 14 Jan 2017 00:00:00 +0530</pubDate>
      <guid>https://sskelkar.github.io/post/setting-up-a-javascript-project-in-2017/</guid>
      <description>&lt;h2&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Creating a front-end JavaScript project can be a daunting task due to the sheer volume of choices available while deciding the tech stack. First, you need to decide the JavaScript framework or library for your project. Do you plan to use the latest ES2015 language features in your code? If yes, then you need a transpiler because your browser probably doesn’t support them yet. Then you require a bundling tool to get your code loaded in the browser. You may want to minify the code for faster load time. To automate all these steps, you need a build script. You may want to deploy your project on a local web server during development. Some setup is required for that. Finally, you need to include some testing framework in your project to write unit tests.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Closures in JavaScript</title>
      <link>https://sskelkar.github.io/post/closures-in-javascript/</link>
      <pubDate>Mon, 20 Jul 2015 00:00:00 +0530</pubDate>
      <guid>https://sskelkar.github.io/post/closures-in-javascript/</guid>
      <description>&lt;p&gt;A good understanding of closures is a must-have skill for any JavaScript programmer. So let&amp;rsquo;s take a look at how they work with two simple examples.&lt;/p&gt;&#xA;&lt;p&gt;In JavaScript, functions are first class citizens. This means a function can be passed as an argument to another function, returned as the value from a function, assigned to a variable and stored in a data structure.&lt;/p&gt;&#xA;&lt;p&gt;We can even write a function within a function, and the inner function has access to the &lt;em&gt;environment&lt;/em&gt; within which it was created. A closure is a combination of a function and the environment in which it was created. This means an inner function can hold the scope of parent function even if the parent function has returned. Following example will make it a little clear.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dependency Injection in AngularJS 1.x</title>
      <link>https://sskelkar.github.io/post/dependency-injection-in-angularjs-1x/</link>
      <pubDate>Sun, 19 Jul 2015 00:00:00 +0530</pubDate>
      <guid>https://sskelkar.github.io/post/dependency-injection-in-angularjs-1x/</guid>
      <description>&lt;p&gt;AngularJS Dependency Injection works like magic! You pass a service name in your controller constructor function and angular runtime promptly provides you with a suitable object. While this makes development process easier, it might be a little disconcerting if you don’t know what’s happening behind the scene. In this article, I will take a look at how angular DI works.&lt;/p&gt;&#xA;&lt;p&gt;In an Angular application, user can create different kinds of components like: directives, controllers, services etc. More often than not, a component has a dependency on other components. Let&amp;rsquo;s take a look at this sample controller:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
