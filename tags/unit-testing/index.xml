<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unit Testing on betweencurlybraces</title>
    <link>https://sskelkar.github.io/tags/unit-testing/</link>
    <description>Recent content in Unit Testing on betweencurlybraces</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Jan 2019 00:00:00 +0530</lastBuildDate>
    
	<atom:link href="https://sskelkar.github.io/tags/unit-testing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Database integration tests for a Spring application</title>
      <link>https://sskelkar.github.io/db-integration-tests-for-spring-app/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/db-integration-tests-for-spring-app/</guid>
      <description>Suppose you are tasked with writing tests for a Spring and Hibernate application. This application uses a mix of native queries, HQL or entity associations to fetch data from the database. If you choose to mock the DAO or entity layers, you leave a significant portion of the code untested. In such cases data integration tests can provide the most correct feedback. But you do you configure your application to run integration tests?</description>
    </item>
    
    <item>
      <title>Setting up a JavaScript project in 2017</title>
      <link>https://sskelkar.github.io/setting-up-a-javascript-project-in-2017/</link>
      <pubDate>Sat, 14 Jan 2017 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/setting-up-a-javascript-project-in-2017/</guid>
      <description>Creating a front-end JavaScript project can be a daunting task due to the sheer volume of choices available while deciding the tech stack. First, you need to decide the JavaScript framework or library for your project. Do you plan to use the latest ES2015 language features in your code? If yes, then you need a transpiler because your browser probably doesn’t support them yet. Then you require a bundling tool to get your code loaded in the browser.</description>
    </item>
    
    <item>
      <title>How unit testing leads to improved code</title>
      <link>https://sskelkar.github.io/how-unit-testing-leads-to-improved-code/</link>
      <pubDate>Sun, 09 Aug 2015 00:00:00 +0530</pubDate>
      
      <guid>https://sskelkar.github.io/how-unit-testing-leads-to-improved-code/</guid>
      <description>In Test Driven Development, the purpose of unit testing is to help us design our classes and not just to validate the correctness of our code. In this article I want to demonstrate how unit testing forces us to write better code, with help of an example. I will use Mockito for mocking.
First, let me define the problem domain I’ll be using in the example. Suppose we have an online booking portal where customers make reservations for travel or accommodation.</description>
    </item>
    
  </channel>
</rss>